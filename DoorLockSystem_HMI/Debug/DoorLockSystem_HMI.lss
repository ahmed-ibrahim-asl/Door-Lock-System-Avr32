
DoorLockSystem_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002716  000027aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  0000280a  2**0
                  ALLOC
  3 .stab         00002b5c  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001993  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <main>
      8a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ea       	ldi	r26, 0xA7	; 167
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ea       	ldi	r24, 0xA7	; 167
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_vidInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	0e 94 a5 06 	call	0xd4a	; 0xd4a <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8d 7f       	andi	r24, 0xFD	; 253
     b84:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     b86:	ab e2       	ldi	r26, 0x2B	; 43
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     b94:	aa e2       	ldi	r26, 0x2A	; 42
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ea e2       	ldi	r30, 0x2A	; 42
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     ba2:	aa e2       	ldi	r26, 0x2A	; 42
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ea e2       	ldi	r30, 0x2A	; 42
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 60       	ori	r24, 0x08	; 8
     bae:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     bcc:	aa e2       	ldi	r26, 0x2A	; 42
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8b 7f       	andi	r24, 0xFB	; 251
     bd8:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 62       	ori	r24, 0x20	; 32
     bf4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     bf6:	a0 e4       	ldi	r26, 0x40	; 64
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e0 e4       	ldi	r30, 0x40	; 64
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 61       	ori	r24, 0x10	; 16
     c02:	8c 93       	st	X, r24
	/**************************************************************/




}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <UART_enuSendChar+0x6>
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c1a:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     c1c:	eb e2       	ldi	r30, 0x2B	; 43
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 95       	swap	r24
     c24:	86 95       	lsr	r24
     c26:	87 70       	andi	r24, 0x07	; 7
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	a1 f3       	breq	.-24     	; 0xc1c <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <UART_enuSendString+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <UART_enuSendString+0x8>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9b 83       	std	Y+3, r25	; 0x03
     c5a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c5c:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	69 f4       	brne	.+26     	; 0xc80 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	8c 83       	std	Y+4, r24	; 0x04
     c6a:	16 c0       	rjmp	.+44     	; 0xc98 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     c6c:	ea 81       	ldd	r30, Y+2	; 0x02
     c6e:	fb 81       	ldd	r31, Y+3	; 0x03
     c70:	80 81       	ld	r24, Z
     c72:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_enuSendChar>
			copy_pu8Data++;
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     c80:	ea 81       	ldd	r30, Y+2	; 0x02
     c82:	fb 81       	ldd	r31, Y+3	; 0x03
     c84:	80 81       	ld	r24, Z
     c86:	88 23       	and	r24, r24
     c88:	89 f7       	brne	.-30     	; 0xc6c <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	8c 83       	std	Y+4, r24	; 0x04
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <UART_enuRecieveChar+0x6>
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <UART_enuRecieveChar+0x8>
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	9b 83       	std	Y+3, r25	; 0x03
     cb6:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     cb8:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	8c 83       	std	Y+4, r24	; 0x04
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     cc8:	eb e2       	ldi	r30, 0x2B	; 43
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 23       	and	r24, r24
     cd0:	dc f7       	brge	.-10     	; 0xcc8 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     cd2:	ec e2       	ldi	r30, 0x2C	; 44
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	ea 81       	ldd	r30, Y+2	; 0x02
     cda:	fb 81       	ldd	r31, Y+3	; 0x03
     cdc:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	8c 83       	std	Y+4, r24	; 0x04
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <UART_enuRecieveString+0x6>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <UART_enuRecieveString+0x8>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9b 83       	std	Y+3, r25	; 0x03
     d04:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     d06:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f4       	brne	.+24     	; 0xd28 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	8c 83       	std	Y+4, r24	; 0x04
     d14:	12 c0       	rjmp	.+36     	; 0xd3a <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	0e 94 54 06 	call	0xca8	; 0xca8 <UART_enuRecieveChar>
			copy_pu8Data+=1;
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
     d28:	ea 81       	ldd	r30, Y+2	; 0x02
     d2a:	fb 81       	ldd	r31, Y+3	; 0x03
     d2c:	80 81       	ld	r24, Z
     d2e:	88 23       	and	r24, r24
     d30:	91 f7       	brne	.-28     	; 0xd16 <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	8c 83       	std	Y+4, r24	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <UART_setBaudRate>:


//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <UART_setBaudRate+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <UART_setBaudRate+0x8>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
     d5a:	1a 82       	std	Y+2, r1	; 0x02
     d5c:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	cc 01       	movw	r24, r24
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	aa 1f       	adc	r26, r26
     d6e:	bb 1f       	adc	r27, r27
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	aa 1f       	adc	r26, r26
     d76:	bb 1f       	adc	r27, r27
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	aa 1f       	adc	r26, r26
     d7e:	bb 1f       	adc	r27, r27
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	aa 1f       	adc	r26, r26
     d86:	bb 1f       	adc	r27, r27
     d88:	9c 01       	movw	r18, r24
     d8a:	ad 01       	movw	r20, r26
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	92 e1       	ldi	r25, 0x12	; 18
     d90:	aa e7       	ldi	r26, 0x7A	; 122
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodsi4>
     d9c:	da 01       	movw	r26, r20
     d9e:	c9 01       	movw	r24, r18
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
     da6:	a0 e4       	ldi	r26, 0x40	; 64
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e0 e4       	ldi	r30, 0x40	; 64
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 77       	andi	r24, 0x7F	; 127
     db2:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
     db4:	e0 e4       	ldi	r30, 0x40	; 64
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	89 2f       	mov	r24, r25
     dbe:	99 27       	eor	r25, r25
     dc0:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
     dc2:	e9 e2       	ldi	r30, 0x29	; 41
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	80 83       	st	Z, r24
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     de2:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
     de4:	ea e3       	ldi	r30, 0x3A	; 58
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 ef       	ldi	r24, 0xF0	; 240
     dea:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
     dec:	eb e3       	ldi	r30, 0x3B	; 59
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	83 ec       	ldi	r24, 0xC3	; 195
     df2:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
     df4:	e7 e3       	ldi	r30, 0x37	; 55
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 ef       	ldi	r24, 0xF0	; 240
     dfa:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
     dfc:	e8 e3       	ldi	r30, 0x38	; 56
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	83 ec       	ldi	r24, 0xC3	; 195
     e02:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
     e04:	e4 e3       	ldi	r30, 0x34	; 52
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 ef       	ldi	r24, 0xF0	; 240
     e0a:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
     e0c:	e5 e3       	ldi	r30, 0x35	; 53
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	83 ec       	ldi	r24, 0xC3	; 195
     e12:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
     e14:	e1 e3       	ldi	r30, 0x31	; 49
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 ef       	ldi	r24, 0xF0	; 240
     e1a:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
     e1c:	e2 e3       	ldi	r30, 0x32	; 50
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	83 ec       	ldi	r24, 0xC3	; 195
     e22:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	6b 83       	std	Y+3, r22	; 0x03
     e46:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     e48:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <DIO_enuSetPinDirection+0x24>
     e50:	de c0       	rjmp	.+444    	; 0x100e <DIO_enuSetPinDirection+0x1e0>
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	88 30       	cpi	r24, 0x08	; 8
     e56:	08 f0       	brcs	.+2      	; 0xe5a <DIO_enuSetPinDirection+0x2c>
     e58:	da c0       	rjmp	.+436    	; 0x100e <DIO_enuSetPinDirection+0x1e0>
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <DIO_enuSetPinDirection+0x34>
     e60:	d6 c0       	rjmp	.+428    	; 0x100e <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3f 83       	std	Y+7, r19	; 0x07
     e6a:	2e 83       	std	Y+6, r18	; 0x06
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_enuSetPinDirection+0x4a>
     e76:	43 c0       	rjmp	.+134    	; 0xefe <DIO_enuSetPinDirection+0xd0>
     e78:	2e 81       	ldd	r18, Y+6	; 0x06
     e7a:	3f 81       	ldd	r19, Y+7	; 0x07
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	2c f4       	brge	.+10     	; 0xe8c <DIO_enuSetPinDirection+0x5e>
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	71 f0       	breq	.+28     	; 0xea6 <DIO_enuSetPinDirection+0x78>
     e8a:	bc c0       	rjmp	.+376    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
     e8c:	2e 81       	ldd	r18, Y+6	; 0x06
     e8e:	3f 81       	ldd	r19, Y+7	; 0x07
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <DIO_enuSetPinDirection+0x6a>
     e96:	5f c0       	rjmp	.+190    	; 0xf56 <DIO_enuSetPinDirection+0x128>
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	91 05       	cpc	r25, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <DIO_enuSetPinDirection+0x76>
     ea2:	85 c0       	rjmp	.+266    	; 0xfae <DIO_enuSetPinDirection+0x180>
     ea4:	af c0       	rjmp	.+350    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
     eac:	aa e3       	ldi	r26, 0x3A	; 58
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ea e3       	ldi	r30, 0x3A	; 58
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_enuSetPinDirection+0x9c>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_enuSetPinDirection+0x98>
     ece:	84 2b       	or	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	98 c0       	rjmp	.+304    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_enuSetPinDirection+0xc4>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_enuSetPinDirection+0xc0>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	83 c0       	rjmp	.+262    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	a1 f4       	brne	.+40     	; 0xf2c <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
     f04:	a7 e3       	ldi	r26, 0x37	; 55
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e7 e3       	ldi	r30, 0x37	; 55
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_enuSetPinDirection+0xf4>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_enuSetPinDirection+0xf0>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	6c c0       	rjmp	.+216    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_enuSetPinDirection+0x11c>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_enuSetPinDirection+0x118>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	57 c0       	rjmp	.+174    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	a1 f4       	brne	.+40     	; 0xf84 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
     f5c:	a4 e3       	ldi	r26, 0x34	; 52
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 e3       	ldi	r30, 0x34	; 52
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_enuSetPinDirection+0x14c>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_enuSetPinDirection+0x148>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
     f84:	a4 e3       	ldi	r26, 0x34	; 52
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e3       	ldi	r30, 0x34	; 52
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_enuSetPinDirection+0x174>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_enuSetPinDirection+0x170>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	2b c0       	rjmp	.+86     	; 0x1004 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a1 f4       	brne	.+40     	; 0xfdc <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
     fb4:	a1 e3       	ldi	r26, 0x31	; 49
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e1 e3       	ldi	r30, 0x31	; 49
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_enuSetPinDirection+0x1a4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_enuSetPinDirection+0x1a0>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_enuSetPinDirection+0x1cc>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_enuSetPinDirection+0x1c8>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	9d 83       	std	Y+5, r25	; 0x05
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    100e:	29 81       	ldd	r18, Y+1	; 0x01
    1010:	2d 83       	std	Y+5, r18	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    1014:	27 96       	adiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	27 97       	sbiw	r28, 0x07	; 7
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
    103e:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1040:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <DIO_enuSetPinValue+0x24>
    1048:	de c0       	rjmp	.+444    	; 0x1206 <DIO_enuSetPinValue+0x1e0>
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <DIO_enuSetPinValue+0x2c>
    1050:	da c0       	rjmp	.+436    	; 0x1206 <DIO_enuSetPinValue+0x1e0>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	08 f0       	brcs	.+2      	; 0x105a <DIO_enuSetPinValue+0x34>
    1058:	d6 c0       	rjmp	.+428    	; 0x1206 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3f 83       	std	Y+7, r19	; 0x07
    1062:	2e 83       	std	Y+6, r18	; 0x06
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <DIO_enuSetPinValue+0x4a>
    106e:	43 c0       	rjmp	.+134    	; 0x10f6 <DIO_enuSetPinValue+0xd0>
    1070:	2e 81       	ldd	r18, Y+6	; 0x06
    1072:	3f 81       	ldd	r19, Y+7	; 0x07
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	2c f4       	brge	.+10     	; 0x1084 <DIO_enuSetPinValue+0x5e>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	71 f0       	breq	.+28     	; 0x109e <DIO_enuSetPinValue+0x78>
    1082:	bc c0       	rjmp	.+376    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
    1084:	2e 81       	ldd	r18, Y+6	; 0x06
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <DIO_enuSetPinValue+0x6a>
    108e:	5f c0       	rjmp	.+190    	; 0x114e <DIO_enuSetPinValue+0x128>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_enuSetPinValue+0x76>
    109a:	85 c0       	rjmp	.+266    	; 0x11a6 <DIO_enuSetPinValue+0x180>
    109c:	af c0       	rjmp	.+350    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	88 23       	and	r24, r24
    10a2:	a1 f0       	breq	.+40     	; 0x10cc <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    10a4:	ab e3       	ldi	r26, 0x3B	; 59
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	eb e3       	ldi	r30, 0x3B	; 59
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuSetPinValue+0x9c>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuSetPinValue+0x98>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	98 c0       	rjmp	.+304    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuSetPinValue+0xc4>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enuSetPinValue+0xc0>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	83 c0       	rjmp	.+262    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	88 23       	and	r24, r24
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_enuSetPinValue+0xf4>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_enuSetPinValue+0xf0>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	6c c0       	rjmp	.+216    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    1124:	a8 e3       	ldi	r26, 0x38	; 56
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e8 e3       	ldi	r30, 0x38	; 56
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_enuSetPinValue+0x11c>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_enuSetPinValue+0x118>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	57 c0       	rjmp	.+174    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	88 23       	and	r24, r24
    1152:	a1 f0       	breq	.+40     	; 0x117c <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_enuSetPinValue+0x14c>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_enuSetPinValue+0x148>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	40 c0       	rjmp	.+128    	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    117c:	a5 e3       	ldi	r26, 0x35	; 53
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e5 e3       	ldi	r30, 0x35	; 53
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_enuSetPinValue+0x174>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_enuSetPinValue+0x170>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	2b c0       	rjmp	.+86     	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	88 23       	and	r24, r24
    11aa:	a1 f0       	breq	.+40     	; 0x11d4 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_enuSetPinValue+0x1a4>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_enuSetPinValue+0x1a0>
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    11d4:	a2 e3       	ldi	r26, 0x32	; 50
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e2 e3       	ldi	r30, 0x32	; 50
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_enuSetPinValue+0x1cc>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_enuSetPinValue+0x1c8>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1200:	99 81       	ldd	r25, Y+1	; 0x01
    1202:	9d 83       	std	Y+5, r25	; 0x05
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    1206:	29 81       	ldd	r18, Y+1	; 0x01
    1208:	2d 83       	std	Y+5, r18	; 0x05
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    120c:	27 96       	adiw	r28, 0x07	; 7
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	28 97       	sbiw	r28, 0x08	; 8
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	5d 83       	std	Y+5, r21	; 0x05
    1238:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    123a:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	29 f4       	brne	.+10     	; 0x124e <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	28 87       	std	Y+8, r18	; 0x08
    124c:	7f c0       	rjmp	.+254    	; 0x134c <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	08 f0       	brcs	.+2      	; 0x1256 <DIO_enuGetPinValue+0x38>
    1254:	79 c0       	rjmp	.+242    	; 0x1348 <DIO_enuGetPinValue+0x12a>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 30       	cpi	r24, 0x08	; 8
    125a:	08 f0       	brcs	.+2      	; 0x125e <DIO_enuGetPinValue+0x40>
    125c:	75 c0       	rjmp	.+234    	; 0x1348 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	48 2f       	mov	r20, r24
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	5f 83       	std	Y+7, r21	; 0x07
    1266:	4e 83       	std	Y+6, r20	; 0x06
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	59 f1       	breq	.+86     	; 0x12c8 <DIO_enuGetPinValue+0xaa>
    1272:	2e 81       	ldd	r18, Y+6	; 0x06
    1274:	3f 81       	ldd	r19, Y+7	; 0x07
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <DIO_enuGetPinValue+0x6a>
    127c:	4e 81       	ldd	r20, Y+6	; 0x06
    127e:	5f 81       	ldd	r21, Y+7	; 0x07
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	69 f0       	breq	.+26     	; 0x12a0 <DIO_enuGetPinValue+0x82>
    1286:	5b c0       	rjmp	.+182    	; 0x133e <DIO_enuGetPinValue+0x120>
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	79 f1       	breq	.+94     	; 0x12f0 <DIO_enuGetPinValue+0xd2>
    1292:	2e 81       	ldd	r18, Y+6	; 0x06
    1294:	3f 81       	ldd	r19, Y+7	; 0x07
    1296:	23 30       	cpi	r18, 0x03	; 3
    1298:	31 05       	cpc	r19, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <DIO_enuGetPinValue+0x80>
    129c:	3d c0       	rjmp	.+122    	; 0x1318 <DIO_enuGetPinValue+0xfa>
    129e:	4f c0       	rjmp	.+158    	; 0x133e <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    12a0:	e9 e3       	ldi	r30, 0x39	; 57
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enuGetPinValue+0x9a>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enuGetPinValue+0x96>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	ec 81       	ldd	r30, Y+4	; 0x04
    12c2:	fd 81       	ldd	r31, Y+5	; 0x05
    12c4:	80 83       	st	Z, r24
    12c6:	3b c0       	rjmp	.+118    	; 0x133e <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    12c8:	e6 e3       	ldi	r30, 0x36	; 54
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enuGetPinValue+0xc2>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_enuGetPinValue+0xbe>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ea:	fd 81       	ldd	r31, Y+5	; 0x05
    12ec:	80 83       	st	Z, r24
    12ee:	27 c0       	rjmp	.+78     	; 0x133e <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    12f0:	e3 e3       	ldi	r30, 0x33	; 51
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_enuGetPinValue+0xea>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_enuGetPinValue+0xe6>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	80 83       	st	Z, r24
    1316:	13 c0       	rjmp	.+38     	; 0x133e <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1318:	e0 e3       	ldi	r30, 0x30	; 48
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_enuGetPinValue+0x112>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_enuGetPinValue+0x10e>
    1334:	ca 01       	movw	r24, r20
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	ec 81       	ldd	r30, Y+4	; 0x04
    133a:	fd 81       	ldd	r31, Y+5	; 0x05
    133c:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1342:	59 81       	ldd	r21, Y+1	; 0x01
    1344:	58 87       	std	Y+8, r21	; 0x08
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	88 87       	std	Y+8, r24	; 0x08
    134c:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    134e:	28 96       	adiw	r28, 0x08	; 8
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_enuTogglePinValue+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_enuTogglePinValue+0x8>
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_enuTogglePinValue+0xa>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1372:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	08 f0       	brcs	.+2      	; 0x137c <DIO_enuTogglePinValue+0x1c>
    137a:	77 c0       	rjmp	.+238    	; 0x146a <DIO_enuTogglePinValue+0x10a>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	08 f0       	brcs	.+2      	; 0x1384 <DIO_enuTogglePinValue+0x24>
    1382:	73 c0       	rjmp	.+230    	; 0x146a <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3e 83       	std	Y+6, r19	; 0x06
    138c:	2d 83       	std	Y+5, r18	; 0x05
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	49 f1       	breq	.+82     	; 0x13ea <DIO_enuTogglePinValue+0x8a>
    1398:	2d 81       	ldd	r18, Y+5	; 0x05
    139a:	3e 81       	ldd	r19, Y+6	; 0x06
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <DIO_enuTogglePinValue+0x4c>
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <DIO_enuTogglePinValue+0x62>
    13aa:	5a c0       	rjmp	.+180    	; 0x1460 <DIO_enuTogglePinValue+0x100>
    13ac:	2d 81       	ldd	r18, Y+5	; 0x05
    13ae:	3e 81       	ldd	r19, Y+6	; 0x06
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	71 f1       	breq	.+92     	; 0x1412 <DIO_enuTogglePinValue+0xb2>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	e9 f1       	breq	.+122    	; 0x143a <DIO_enuTogglePinValue+0xda>
    13c0:	4f c0       	rjmp	.+158    	; 0x1460 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    13c2:	ab e3       	ldi	r26, 0x3B	; 59
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_enuTogglePinValue+0x80>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_enuTogglePinValue+0x7c>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	3b c0       	rjmp	.+118    	; 0x1460 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_enuTogglePinValue+0xa8>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_enuTogglePinValue+0xa4>
    140c:	84 27       	eor	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	27 c0       	rjmp	.+78     	; 0x1460 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    1412:	a5 e3       	ldi	r26, 0x35	; 53
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e5 e3       	ldi	r30, 0x35	; 53
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_enuTogglePinValue+0xd0>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_enuTogglePinValue+0xcc>
    1434:	84 27       	eor	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    143a:	a2 e3       	ldi	r26, 0x32	; 50
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_enuTogglePinValue+0xf8>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_enuTogglePinValue+0xf4>
    145c:	84 27       	eor	r24, r20
    145e:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1464:	99 81       	ldd	r25, Y+1	; 0x01
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    146a:	29 81       	ldd	r18, Y+1	; 0x01
    146c:	2c 83       	std	Y+4, r18	; 0x04
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1470:	26 96       	adiw	r28, 0x06	; 6
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_enuSetPortDirection+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_enuSetPortDirection+0x8>
    148a:	00 d0       	rcall	.+0      	; 0x148c <DIO_enuSetPortDirection+0xa>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1494:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	08 f0       	brcs	.+2      	; 0x149e <DIO_enuSetPortDirection+0x1c>
    149c:	57 c0       	rjmp	.+174    	; 0x154c <DIO_enuSetPortDirection+0xca>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <DIO_enuSetPortDirection+0x24>
    14a4:	53 c0       	rjmp	.+166    	; 0x154c <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3e 83       	std	Y+6, r19	; 0x06
    14ae:	2d 83       	std	Y+5, r18	; 0x05
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f1       	breq	.+66     	; 0x14fc <DIO_enuSetPortDirection+0x7a>
    14ba:	2d 81       	ldd	r18, Y+5	; 0x05
    14bc:	3e 81       	ldd	r19, Y+6	; 0x06
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <DIO_enuSetPortDirection+0x4c>
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <DIO_enuSetPortDirection+0x62>
    14cc:	3a c0       	rjmp	.+116    	; 0x1542 <DIO_enuSetPortDirection+0xc0>
    14ce:	2d 81       	ldd	r18, Y+5	; 0x05
    14d0:	3e 81       	ldd	r19, Y+6	; 0x06
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	f1 f0       	breq	.+60     	; 0x1514 <DIO_enuSetPortDirection+0x92>
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	29 f1       	breq	.+74     	; 0x152c <DIO_enuSetPortDirection+0xaa>
    14e2:	2f c0       	rjmp	.+94     	; 0x1542 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    14ea:	ea e3       	ldi	r30, 0x3A	; 58
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	10 82       	st	Z, r1
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	29 f4       	brne	.+10     	; 0x150c <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    1502:	e7 e3       	ldi	r30, 0x37	; 55
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	80 83       	st	Z, r24
    150a:	1b c0       	rjmp	.+54     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    150c:	e7 e3       	ldi	r30, 0x37	; 55
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	29 f4       	brne	.+10     	; 0x1524 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    151a:	e4 e3       	ldi	r30, 0x34	; 52
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	80 83       	st	Z, r24
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    1524:	e4 e3       	ldi	r30, 0x34	; 52
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	10 82       	st	Z, r1
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	29 f4       	brne	.+10     	; 0x153c <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    153c:	e1 e3       	ldi	r30, 0x31	; 49
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1546:	99 81       	ldd	r25, Y+1	; 0x01
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	2c 83       	std	Y+4, r18	; 0x04
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1552:	26 96       	adiw	r28, 0x06	; 6
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <DIO_enuSetPortValue+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_enuSetPortValue+0x8>
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_enuSetPortValue+0xa>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1576:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	08 f0       	brcs	.+2      	; 0x1580 <DIO_enuSetPortValue+0x1c>
    157e:	57 c0       	rjmp	.+174    	; 0x162e <DIO_enuSetPortValue+0xca>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	08 f0       	brcs	.+2      	; 0x1588 <DIO_enuSetPortValue+0x24>
    1586:	53 c0       	rjmp	.+166    	; 0x162e <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3e 83       	std	Y+6, r19	; 0x06
    1590:	2d 83       	std	Y+5, r18	; 0x05
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	09 f1       	breq	.+66     	; 0x15de <DIO_enuSetPortValue+0x7a>
    159c:	2d 81       	ldd	r18, Y+5	; 0x05
    159e:	3e 81       	ldd	r19, Y+6	; 0x06
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <DIO_enuSetPortValue+0x4c>
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <DIO_enuSetPortValue+0x62>
    15ae:	3a c0       	rjmp	.+116    	; 0x1624 <DIO_enuSetPortValue+0xc0>
    15b0:	2d 81       	ldd	r18, Y+5	; 0x05
    15b2:	3e 81       	ldd	r19, Y+6	; 0x06
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	f1 f0       	breq	.+60     	; 0x15f6 <DIO_enuSetPortValue+0x92>
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	29 f1       	breq	.+74     	; 0x160e <DIO_enuSetPortValue+0xaa>
    15c4:	2f c0       	rjmp	.+94     	; 0x1624 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	88 23       	and	r24, r24
    15ca:	29 f0       	breq	.+10     	; 0x15d6 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	80 83       	st	Z, r24
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    15d6:	eb e3       	ldi	r30, 0x3B	; 59
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	10 82       	st	Z, r1
    15dc:	23 c0       	rjmp	.+70     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 23       	and	r24, r24
    15e2:	29 f0       	breq	.+10     	; 0x15ee <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	80 83       	st	Z, r24
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	10 82       	st	Z, r1
    15f4:	17 c0       	rjmp	.+46     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 23       	and	r24, r24
    15fa:	29 f0       	breq	.+10     	; 0x1606 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    15fc:	e5 e3       	ldi	r30, 0x35	; 53
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	80 83       	st	Z, r24
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    1606:	e5 e3       	ldi	r30, 0x35	; 53
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	10 82       	st	Z, r1
    160c:	0b c0       	rjmp	.+22     	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 23       	and	r24, r24
    1612:	29 f0       	breq	.+10     	; 0x161e <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	80 83       	st	Z, r24
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    161e:	e2 e3       	ldi	r30, 0x32	; 50
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1628:	99 81       	ldd	r25, Y+1	; 0x01
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    162e:	29 81       	ldd	r18, Y+1	; 0x01
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1634:	26 96       	adiw	r28, 0x06	; 6
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	e9 97       	sbiw	r28, 0x39	; 57
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    165a:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	67 e0       	ldi	r22, 0x07	; 7
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	67 e0       	ldi	r22, 0x07	; 7
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	66 e0       	ldi	r22, 0x06	; 6
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	65 e0       	ldi	r22, 0x05	; 5
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	64 e0       	ldi	r22, 0x04	; 4
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	ac e0       	ldi	r26, 0x0C	; 12
    16a8:	b2 e4       	ldi	r27, 0x42	; 66
    16aa:	8d ab       	std	Y+53, r24	; 0x35
    16ac:	9e ab       	std	Y+54, r25	; 0x36
    16ae:	af ab       	std	Y+55, r26	; 0x37
    16b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6d a9       	ldd	r22, Y+53	; 0x35
    16b4:	7e a9       	ldd	r23, Y+54	; 0x36
    16b6:	8f a9       	ldd	r24, Y+55	; 0x37
    16b8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	89 ab       	std	Y+49, r24	; 0x31
    16cc:	9a ab       	std	Y+50, r25	; 0x32
    16ce:	ab ab       	std	Y+51, r26	; 0x33
    16d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d2:	69 a9       	ldd	r22, Y+49	; 0x31
    16d4:	7a a9       	ldd	r23, Y+50	; 0x32
    16d6:	8b a9       	ldd	r24, Y+51	; 0x33
    16d8:	9c a9       	ldd	r25, Y+52	; 0x34
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_enuInit+0xae>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6d a9       	ldd	r22, Y+53	; 0x35
    170e:	7e a9       	ldd	r23, Y+54	; 0x36
    1710:	8f a9       	ldd	r24, Y+55	; 0x37
    1712:	98 ad       	ldd	r25, Y+56	; 0x38
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	98 ab       	std	Y+48, r25	; 0x30
    1732:	8f a7       	std	Y+47, r24	; 0x2f
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <LCD_enuInit+0x10e>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9e a7       	std	Y+46, r25	; 0x2e
    173c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1740:	9e a5       	ldd	r25, Y+46	; 0x2e
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_enuInit+0xfc>
    1746:	9e a7       	std	Y+46, r25	; 0x2e
    1748:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	98 ab       	std	Y+48, r25	; 0x30
    1752:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8f a5       	ldd	r24, Y+47	; 0x2f
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <LCD_enuInit+0xf0>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	69 a9       	ldd	r22, Y+49	; 0x31
    1760:	7a a9       	ldd	r23, Y+50	; 0x32
    1762:	8b a9       	ldd	r24, Y+51	; 0x33
    1764:	9c a9       	ldd	r25, Y+52	; 0x34
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	9c a7       	std	Y+44, r25	; 0x2c
    1778:	8b a7       	std	Y+43, r24	; 0x2b
    177a:	8b a5       	ldd	r24, Y+43	; 0x2b
    177c:	9c a5       	ldd	r25, Y+44	; 0x2c
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_enuInit+0x138>
    1782:	9c a7       	std	Y+44, r25	; 0x2c
    1784:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	8f a3       	std	Y+39, r24	; 0x27
    17a2:	98 a7       	std	Y+40, r25	; 0x28
    17a4:	a9 a7       	std	Y+41, r26	; 0x29
    17a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6f a1       	ldd	r22, Y+39	; 0x27
    17aa:	78 a5       	ldd	r23, Y+40	; 0x28
    17ac:	89 a5       	ldd	r24, Y+41	; 0x29
    17ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a ef       	ldi	r20, 0xFA	; 250
    17b6:	54 e4       	ldi	r21, 0x44	; 68
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8b a3       	std	Y+35, r24	; 0x23
    17c2:	9c a3       	std	Y+36, r25	; 0x24
    17c4:	ad a3       	std	Y+37, r26	; 0x25
    17c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ca:	7c a1       	ldd	r23, Y+36	; 0x24
    17cc:	8d a1       	ldd	r24, Y+37	; 0x25
    17ce:	9e a1       	ldd	r25, Y+38	; 0x26
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <LCD_enuInit+0x1a4>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9a a3       	std	Y+34, r25	; 0x22
    17e6:	89 a3       	std	Y+33, r24	; 0x21
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    17ea:	6b a1       	ldd	r22, Y+35	; 0x23
    17ec:	7c a1       	ldd	r23, Y+36	; 0x24
    17ee:	8d a1       	ldd	r24, Y+37	; 0x25
    17f0:	9e a1       	ldd	r25, Y+38	; 0x26
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6f a1       	ldd	r22, Y+39	; 0x27
    1804:	78 a5       	ldd	r23, Y+40	; 0x28
    1806:	89 a5       	ldd	r24, Y+41	; 0x29
    1808:	9a a5       	ldd	r25, Y+42	; 0x2a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9a a3       	std	Y+34, r25	; 0x22
    1828:	89 a3       	std	Y+33, r24	; 0x21
    182a:	0f c0       	rjmp	.+30     	; 0x184a <LCD_enuInit+0x204>
    182c:	88 ec       	ldi	r24, 0xC8	; 200
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	98 a3       	std	Y+32, r25	; 0x20
    1832:	8f 8f       	std	Y+31, r24	; 0x1f
    1834:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1836:	98 a1       	ldd	r25, Y+32	; 0x20
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_enuInit+0x1f2>
    183c:	98 a3       	std	Y+32, r25	; 0x20
    183e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9a a3       	std	Y+34, r25	; 0x22
    1848:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	89 a1       	ldd	r24, Y+33	; 0x21
    184c:	9a a1       	ldd	r25, Y+34	; 0x22
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <LCD_enuInit+0x1e6>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6b a1       	ldd	r22, Y+35	; 0x23
    1856:	7c a1       	ldd	r23, Y+36	; 0x24
    1858:	8d a1       	ldd	r24, Y+37	; 0x25
    185a:	9e a1       	ldd	r25, Y+38	; 0x26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
    1868:	89 a1       	ldd	r24, Y+33	; 0x21
    186a:	9a a1       	ldd	r25, Y+34	; 0x22
    186c:	9e 8f       	std	Y+30, r25	; 0x1e
    186e:	8d 8f       	std	Y+29, r24	; 0x1d
    1870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_enuInit+0x22e>
    1878:	9e 8f       	std	Y+30, r25	; 0x1e
    187a:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    1882:	80 ef       	ldi	r24, 0xF0	; 240
    1884:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e8       	ldi	r26, 0x80	; 128
    188e:	bf e3       	ldi	r27, 0x3F	; 63
    1890:	89 8f       	std	Y+25, r24	; 0x19
    1892:	9a 8f       	std	Y+26, r25	; 0x1a
    1894:	ab 8f       	std	Y+27, r26	; 0x1b
    1896:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1898:	69 8d       	ldd	r22, Y+25	; 0x19
    189a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4a ef       	ldi	r20, 0xFA	; 250
    18a6:	54 e4       	ldi	r21, 0x44	; 68
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8d 8b       	std	Y+21, r24	; 0x15
    18b2:	9e 8b       	std	Y+22, r25	; 0x16
    18b4:	af 8b       	std	Y+23, r26	; 0x17
    18b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ba:	7e 89       	ldd	r23, Y+22	; 0x16
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	98 8d       	ldd	r25, Y+24	; 0x18
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e8       	ldi	r20, 0x80	; 128
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	2c f4       	brge	.+10     	; 0x18da <LCD_enuInit+0x294>
		__ticks = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 8b       	std	Y+20, r25	; 0x14
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    18da:	6d 89       	ldd	r22, Y+21	; 0x15
    18dc:	7e 89       	ldd	r23, Y+22	; 0x16
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	4f e7       	ldi	r20, 0x7F	; 127
    18e8:	57 e4       	ldi	r21, 0x47	; 71
    18ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ee:	18 16       	cp	r1, r24
    18f0:	4c f5       	brge	.+82     	; 0x1944 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	0f c0       	rjmp	.+30     	; 0x193a <LCD_enuInit+0x2f4>
    191c:	88 ec       	ldi	r24, 0xC8	; 200
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9a 8b       	std	Y+18, r25	; 0x12
    1922:	89 8b       	std	Y+17, r24	; 0x11
    1924:	89 89       	ldd	r24, Y+17	; 0x11
    1926:	9a 89       	ldd	r25, Y+18	; 0x12
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_enuInit+0x2e2>
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193a:	8b 89       	ldd	r24, Y+19	; 0x13
    193c:	9c 89       	ldd	r25, Y+20	; 0x14
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	69 f7       	brne	.-38     	; 0x191c <LCD_enuInit+0x2d6>
    1942:	14 c0       	rjmp	.+40     	; 0x196c <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	6d 89       	ldd	r22, Y+21	; 0x15
    1946:	7e 89       	ldd	r23, Y+22	; 0x16
    1948:	8f 89       	ldd	r24, Y+23	; 0x17
    194a:	98 8d       	ldd	r25, Y+24	; 0x18
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
    1958:	8b 89       	ldd	r24, Y+19	; 0x13
    195a:	9c 89       	ldd	r25, Y+20	; 0x14
    195c:	98 8b       	std	Y+16, r25	; 0x10
    195e:	8f 87       	std	Y+15, r24	; 0x0f
    1960:	8f 85       	ldd	r24, Y+15	; 0x0f
    1962:	98 89       	ldd	r25, Y+16	; 0x10
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_enuInit+0x31e>
    1968:	98 8b       	std	Y+16, r25	; 0x10
    196a:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e4       	ldi	r27, 0x40	; 64
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	ad 87       	std	Y+13, r26	; 0x0d
    1986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6b 85       	ldd	r22, Y+11	; 0x0b
    198a:	7c 85       	ldd	r23, Y+12	; 0x0c
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8f 83       	std	Y+7, r24	; 0x07
    19a2:	98 87       	std	Y+8, r25	; 0x08
    19a4:	a9 87       	std	Y+9, r26	; 0x09
    19a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_enuInit+0x384>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_enuInit+0x3e4>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_enuInit+0x3d2>
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_enuInit+0x3c6>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_enuInit+0x40e>
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 c0 00 	sts	0x00C0, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    1a72:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1a74:	e9 96       	adiw	r28, 0x39	; 57
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	6e 97       	sbiw	r28, 0x1e	; 30
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1a9c:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    1a9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa0:	82 95       	swap	r24
    1aa2:	8f 70       	andi	r24, 0x0F	; 15
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	91 70       	andi	r25, 0x01	; 1
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	64 e0       	ldi	r22, 0x04	; 4
    1aac:	49 2f       	mov	r20, r25
    1aae:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    1ab2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab4:	82 95       	swap	r24
    1ab6:	86 95       	lsr	r24
    1ab8:	87 70       	andi	r24, 0x07	; 7
    1aba:	98 2f       	mov	r25, r24
    1abc:	91 70       	andi	r25, 0x01	; 1
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	65 e0       	ldi	r22, 0x05	; 5
    1ac2:	49 2f       	mov	r20, r25
    1ac4:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    1ac8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aca:	82 95       	swap	r24
    1acc:	86 95       	lsr	r24
    1ace:	86 95       	lsr	r24
    1ad0:	83 70       	andi	r24, 0x03	; 3
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	91 70       	andi	r25, 0x01	; 1
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	66 e0       	ldi	r22, 0x06	; 6
    1ada:	49 2f       	mov	r20, r25
    1adc:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    1ae0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ae2:	98 2f       	mov	r25, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	99 27       	eor	r25, r25
    1ae8:	99 1f       	adc	r25, r25
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	67 e0       	ldi	r22, 0x07	; 7
    1aee:	49 2f       	mov	r20, r25
    1af0:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	63 e0       	ldi	r22, 0x03	; 3
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e0       	ldi	r26, 0x00	; 0
    1b04:	b0 e4       	ldi	r27, 0x40	; 64
    1b06:	89 8f       	std	Y+25, r24	; 0x19
    1b08:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8d 8b       	std	Y+21, r24	; 0x15
    1b28:	9e 8b       	std	Y+22, r25	; 0x16
    1b2a:	af 8b       	std	Y+23, r26	; 0x17
    1b2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <WriteNLatch+0xca>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 8b       	std	Y+20, r25	; 0x14
    1b4c:	8b 8b       	std	Y+19, r24	; 0x13
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <WriteNLatch+0x148>
	else if (__tmp > 65535)
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <WriteNLatch+0x12a>
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9a 8b       	std	Y+18, r25	; 0x12
    1b98:	89 8b       	std	Y+17, r24	; 0x11
    1b9a:	89 89       	ldd	r24, Y+17	; 0x11
    1b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <WriteNLatch+0x118>
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <WriteNLatch+0x10c>
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9c 8b       	std	Y+20, r25	; 0x14
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	98 8b       	std	Y+16, r25	; 0x10
    1bd4:	8f 87       	std	Y+15, r24	; 0x0f
    1bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd8:	98 89       	ldd	r25, Y+16	; 0x10
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <WriteNLatch+0x154>
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	63 e0       	ldi	r22, 0x03	; 3
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    1bec:	80 91 c0 00 	lds	r24, 0x00C0
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <WriteNLatch+0x170>
    1bf4:	a2 c0       	rjmp	.+324    	; 0x1d3a <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    1bf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	91 70       	andi	r25, 0x01	; 1
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	64 e0       	ldi	r22, 0x04	; 4
    1c00:	49 2f       	mov	r20, r25
    1c02:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    1c06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c08:	86 95       	lsr	r24
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	91 70       	andi	r25, 0x01	; 1
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	65 e0       	ldi	r22, 0x05	; 5
    1c12:	49 2f       	mov	r20, r25
    1c14:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    1c18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c1a:	86 95       	lsr	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	98 2f       	mov	r25, r24
    1c20:	91 70       	andi	r25, 0x01	; 1
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	49 2f       	mov	r20, r25
    1c28:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    1c2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c2e:	86 95       	lsr	r24
    1c30:	86 95       	lsr	r24
    1c32:	86 95       	lsr	r24
    1c34:	98 2f       	mov	r25, r24
    1c36:	91 70       	andi	r25, 0x01	; 1
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	67 e0       	ldi	r22, 0x07	; 7
    1c3c:	49 2f       	mov	r20, r25
    1c3e:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	b0 e4       	ldi	r27, 0x40	; 64
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
    1c56:	9c 87       	std	Y+12, r25	; 0x0c
    1c58:	ad 87       	std	Y+13, r26	; 0x0d
    1c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8f 83       	std	Y+7, r24	; 0x07
    1c76:	98 87       	std	Y+8, r25	; 0x08
    1c78:	a9 87       	std	Y+9, r26	; 0x09
    1c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <WriteNLatch+0x218>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <WriteNLatch+0x296>
	else if (__tmp > 65535)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <WriteNLatch+0x278>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <WriteNLatch+0x266>
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <WriteNLatch+0x25a>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <WriteNLatch+0x2a2>
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	63 e0       	ldi	r22, 0x03	; 3
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1d40:	6e 96       	adiw	r28, 0x1e	; 30
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <LCD_enuSendData+0x6>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1d5e:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	67 e0       	ldi	r22, 0x07	; 7
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <WriteNLatch>



	return Local_enu_ErrorState;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <LCD_enuSendCommand+0x6>
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1d92:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	67 e0       	ldi	r22, 0x07	; 7
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <LCD_u8SendString+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LCD_u8SendString+0x8>
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	f9 f0       	breq	.+62     	; 0x1e18 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    1dda:	19 82       	std	Y+1, r1	; 0x01
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	90 81       	ld	r25, Z
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	89 2f       	mov	r24, r25
    1df8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 23       	and	r24, r24
    1e10:	31 f7       	brne	.-52     	; 0x1dde <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	a0 97       	sbiw	r28, 0x20	; 32
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	6b 8f       	std	Y+27, r22	; 0x1b
    1e48:	7c 8f       	std	Y+28, r23	; 0x1c
    1e4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4e:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1e50:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    1e52:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    1e54:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    1e56:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    1e58:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    1e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e60:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e62:	bb 23       	and	r27, r27
    1e64:	94 f4       	brge	.+36     	; 0x1e8a <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    1e66:	8d e2       	ldi	r24, 0x2D	; 45
    1e68:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>
		Copy_u8data*=-1;
    1e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e70:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e72:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e74:	b0 95       	com	r27
    1e76:	a0 95       	com	r26
    1e78:	90 95       	com	r25
    1e7a:	81 95       	neg	r24
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	af 4f       	sbci	r26, 0xFF	; 255
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	8b 8f       	std	Y+27, r24	; 0x1b
    1e84:	9c 8f       	std	Y+28, r25	; 0x1c
    1e86:	ad 8f       	std	Y+29, r26	; 0x1d
    1e88:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    1e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e90:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	a1 05       	cpc	r26, r1
    1e96:	b1 05       	cpc	r27, r1
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <LCD_enuIntegerToString+0x6a>
    1e9a:	4b c0       	rjmp	.+150    	; 0x1f32 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	07 96       	adiw	r24, 0x07	; 7
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	80 83       	st	Z, r24
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	07 96       	adiw	r24, 0x07	; 7
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e2 0f       	add	r30, r18
    1ec4:	f3 1f       	adc	r31, r19
    1ec6:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	88 a3       	std	Y+32, r24	; 0x20
    1ecc:	7f c0       	rjmp	.+254    	; 0x1fcc <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    1ece:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1edc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1ede:	be 8d       	ldd	r27, Y+30	; 0x1e
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 30 13 	call	0x2660	; 0x2660 <__divmodsi4>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	40 5d       	subi	r20, 0xD0	; 208
    1efa:	ce 01       	movw	r24, r28
    1efc:	07 96       	adiw	r24, 0x07	; 7
    1efe:	fc 01       	movw	r30, r24
    1f00:	e2 0f       	add	r30, r18
    1f02:	f3 1f       	adc	r31, r19
    1f04:	40 83       	st	Z, r20
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    1f0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1f1c:	be 8d       	ldd	r27, Y+30	; 0x1e
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 30 13 	call	0x2660	; 0x2660 <__divmodsi4>
    1f26:	da 01       	movw	r26, r20
    1f28:	c9 01       	movw	r24, r18
    1f2a:	8b 8f       	std	Y+27, r24	; 0x1b
    1f2c:	9c 8f       	std	Y+28, r25	; 0x1c
    1f2e:	ad 8f       	std	Y+29, r26	; 0x1d
    1f30:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    1f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f36:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1f38:	be 8d       	ldd	r27, Y+30	; 0x1e
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	a1 05       	cpc	r26, r1
    1f3e:	b1 05       	cpc	r27, r1
    1f40:	31 f6       	brne	.-116    	; 0x1ece <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	ce 01       	movw	r24, r28
    1f4a:	07 96       	adiw	r24, 0x07	; 7
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	81 50       	subi	r24, 0x01	; 1
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	2c c0       	rjmp	.+88     	; 0x1fb4 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	ce 01       	movw	r24, r28
    1f64:	07 96       	adiw	r24, 0x07	; 7
    1f66:	fc 01       	movw	r30, r24
    1f68:	e2 0f       	add	r30, r18
    1f6a:	f3 1f       	adc	r31, r19
    1f6c:	80 81       	ld	r24, Z
    1f6e:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	48 2f       	mov	r20, r24
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	07 96       	adiw	r24, 0x07	; 7
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	20 81       	ld	r18, Z
    1f88:	ce 01       	movw	r24, r28
    1f8a:	07 96       	adiw	r24, 0x07	; 7
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e4 0f       	add	r30, r20
    1f90:	f5 1f       	adc	r31, r21
    1f92:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	07 96       	adiw	r24, 0x07	; 7
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	80 83       	st	Z, r24

        Local_u8Start++;
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	81 50       	subi	r24, 0x01	; 1
    1fb2:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	98 17       	cp	r25, r24
    1fba:	80 f2       	brcs	.-96     	; 0x1f5c <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	07 96       	adiw	r24, 0x07	; 7
    1fc0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    1fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fca:	88 a3       	std	Y+32, r24	; 0x20
    1fcc:	88 a1       	ldd	r24, Y+32	; 0x20
}
    1fce:	a0 96       	adiw	r28, 0x20	; 32
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	27 97       	sbiw	r28, 0x07	; 7
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
    1ff6:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    1ff8:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	81 31       	cpi	r24, 0x11	; 17
    1ffe:	18 f4       	brcc	.+6      	; 0x2006 <LCD_u8SetPosXY+0x26>
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	18 f0       	brcs	.+6      	; 0x200c <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    2006:	2a 81       	ldd	r18, Y+2	; 0x02
    2008:	2f 83       	std	Y+7, r18	; 0x07
    200a:	23 c0       	rjmp	.+70     	; 0x2052 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    200c:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3e 83       	std	Y+6, r19	; 0x06
    2016:	2d 83       	std	Y+5, r18	; 0x05
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	31 f0       	breq	.+12     	; 0x202e <LCD_u8SetPosXY+0x4e>
    2022:	2d 81       	ldd	r18, Y+5	; 0x05
    2024:	3e 81       	ldd	r19, Y+6	; 0x06
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	21 f0       	breq	.+8      	; 0x2034 <LCD_u8SetPosXY+0x54>
    202c:	07 c0       	rjmp	.+14     	; 0x203c <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	05 c0       	rjmp	.+10     	; 0x203e <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	80 5c       	subi	r24, 0xC0	; 192
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	01 c0       	rjmp	.+2      	; 0x203e <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    203c:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	80 68       	ori	r24, 0x80	; 128
    2042:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    204e:	3a 81       	ldd	r19, Y+2	; 0x02
    2050:	3f 83       	std	Y+7, r19	; 0x07
    2052:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2054:	27 96       	adiw	r28, 0x07	; 7
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	27 97       	sbiw	r28, 0x07	; 7
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	9d 83       	std	Y+5, r25	; 0x05
    207c:	8c 83       	std	Y+4, r24	; 0x04
    207e:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2080:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	9d 81       	ldd	r25, Y+5	; 0x05
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	19 f0       	breq	.+6      	; 0x2090 <LCD_u8StoreCustomChar+0x2a>
    208a:	8e 81       	ldd	r24, Y+6	; 0x06
    208c:	89 30       	cpi	r24, 0x09	; 9
    208e:	18 f0       	brcs	.+6      	; 0x2096 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	8f 83       	std	Y+7, r24	; 0x07
    2094:	2a c0       	rjmp	.+84     	; 0x20ea <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	80 64       	ori	r24, 0x40	; 64
    20ae:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	fc 01       	movw	r30, r24
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	80 81       	ld	r24, Z
    20cc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	88 30       	cpi	r24, 0x08	; 8
    20da:	78 f3       	brcs	.-34     	; 0x20ba <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20ec:	27 96       	adiw	r28, 0x07	; 7
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <LCD_u8DisplayCustomChar+0x6>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <LCD_u8DisplayCustomChar+0x8>
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	6b 83       	std	Y+3, r22	; 0x03
    210e:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2110:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	6b 81       	ldd	r22, Y+3	; 0x03
    2116:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    213e:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	62 e0       	ldi	r22, 0x02	; 2
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	63 e0       	ldi	r22, 0x03	; 3
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	63 e0       	ldi	r22, 0x03	; 3
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	64 e0       	ldi	r22, 0x04	; 4
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	65 e0       	ldi	r22, 0x05	; 5
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	66 e0       	ldi	r22, 0x06	; 6
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	67 e0       	ldi	r22, 0x07	; 7
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	64 e0       	ldi	r22, 0x04	; 4
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	65 e0       	ldi	r22, 0x05	; 5
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	66 e0       	ldi	r22, 0x06	; 6
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	67 e0       	ldi	r22, 0x07	; 7
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	2a 97       	sbiw	r28, 0x0a	; 10
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    2204:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    2206:	1a 82       	std	Y+2, r1	; 0x02
    2208:	1b 82       	std	Y+3, r1	; 0x03
    220a:	1c 82       	std	Y+4, r1	; 0x04
    220c:	1d 82       	std	Y+5, r1	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    220e:	1e 82       	std	Y+6, r1	; 0x06
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	8f 83       	std	Y+7, r24	; 0x07
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	88 87       	std	Y+8, r24	; 0x08
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    221c:	19 82       	std	Y+1, r1	; 0x01
    221e:	36 c0       	rjmp	.+108    	; 0x228c <LCD_vidSetRowPattern+0x9e>

		if(Local_u8RowIterator == Copy_u8Row){
    2220:	99 81       	ldd	r25, Y+1	; 0x01
    2222:	8a 85       	ldd	r24, Y+10	; 0x0a
    2224:	98 17       	cp	r25, r24
    2226:	c1 f4       	brne	.+48     	; 0x2258 <LCD_vidSetRowPattern+0x6a>

			DIO_enuSetPinValue(
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	ce 01       	movw	r24, r28
    2230:	02 96       	adiw	r24, 0x02	; 2
    2232:	fc 01       	movw	r30, r24
    2234:	e2 0f       	add	r30, r18
    2236:	f3 1f       	adc	r31, r19
    2238:	40 81       	ld	r20, Z
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	ce 01       	movw	r24, r28
    2242:	06 96       	adiw	r24, 0x06	; 6
    2244:	fc 01       	movw	r30, r24
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	90 81       	ld	r25, Z
    224c:	84 2f       	mov	r24, r20
    224e:	69 2f       	mov	r22, r25
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
    2256:	17 c0       	rjmp	.+46     	; 0x2286 <LCD_vidSetRowPattern+0x98>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	ce 01       	movw	r24, r28
    2260:	02 96       	adiw	r24, 0x02	; 2
    2262:	fc 01       	movw	r30, r24
    2264:	e2 0f       	add	r30, r18
    2266:	f3 1f       	adc	r31, r19
    2268:	40 81       	ld	r20, Z
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	ce 01       	movw	r24, r28
    2272:	06 96       	adiw	r24, 0x06	; 6
    2274:	fc 01       	movw	r30, r24
    2276:	e2 0f       	add	r30, r18
    2278:	f3 1f       	adc	r31, r19
    227a:	90 81       	ld	r25, Z
    227c:	84 2f       	mov	r24, r20
    227e:	69 2f       	mov	r22, r25
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	84 30       	cpi	r24, 0x04	; 4
    2290:	38 f2       	brcs	.-114    	; 0x2220 <LCD_vidSetRowPattern+0x32>
					DIO_u8HIGH);
		}
	}


}
    2292:	2a 96       	adiw	r28, 0x0a	; 10
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	2f 97       	sbiw	r28, 0x0f	; 15
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	9e 87       	std	Y+14, r25	; 0x0e
    22ba:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    22bc:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	19 f4       	brne	.+6      	; 0x22cc <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	8f 87       	std	Y+15, r24	; 0x0f
    22ca:	7b c0       	rjmp	.+246    	; 0x23c2 <keypad_enuGetPressedKey+0x11e>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    22d0:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    22d2:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    22d4:	1d 82       	std	Y+5, r1	; 0x05
    22d6:	1e 82       	std	Y+6, r1	; 0x06
    22d8:	1f 82       	std	Y+7, r1	; 0x07
    22da:	18 86       	std	Y+8, r1	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    22dc:	84 e0       	ldi	r24, 0x04	; 4
    22de:	89 87       	std	Y+9, r24	; 0x09
    22e0:	85 e0       	ldi	r24, 0x05	; 5
    22e2:	8a 87       	std	Y+10, r24	; 0x0a
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	8b 87       	std	Y+11, r24	; 0x0b
    22e8:	87 e0       	ldi	r24, 0x07	; 7
    22ea:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    22ec:	1a 82       	std	Y+2, r1	; 0x02
    22ee:	63 c0       	rjmp	.+198    	; 0x23b6 <keypad_enuGetPressedKey+0x112>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	57 c0       	rjmp	.+174    	; 0x23a8 <keypad_enuGetPressedKey+0x104>

				DIO_enuGetPinValue(
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	ce 01       	movw	r24, r28
    2302:	05 96       	adiw	r24, 0x05	; 5
    2304:	fc 01       	movw	r30, r24
    2306:	e2 0f       	add	r30, r18
    2308:	f3 1f       	adc	r31, r19
    230a:	40 81       	ld	r20, Z
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	ce 01       	movw	r24, r28
    2314:	09 96       	adiw	r24, 0x09	; 9
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	90 81       	ld	r25, Z
    231e:	9e 01       	movw	r18, r28
    2320:	2c 5f       	subi	r18, 0xFC	; 252
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
    2324:	84 2f       	mov	r24, r20
    2326:	69 2f       	mov	r22, r25
    2328:	a9 01       	movw	r20, r18
    232a:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	88 23       	and	r24, r24
    2332:	b9 f5       	brne	.+110    	; 0x23a2 <keypad_enuGetPressedKey+0xfe>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 01       	movw	r18, r24
    233c:	22 0f       	add	r18, r18
    233e:	33 1f       	adc	r19, r19
    2340:	22 0f       	add	r18, r18
    2342:	33 1f       	adc	r19, r19
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	82 0f       	add	r24, r18
    234c:	93 1f       	adc	r25, r19
    234e:	fc 01       	movw	r30, r24
    2350:	e1 55       	subi	r30, 0x51	; 81
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	ed 85       	ldd	r30, Y+13	; 0x0d
    2358:	fe 85       	ldd	r31, Y+14	; 0x0e
    235a:	80 83       	st	Z, r24
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <keypad_enuGetPressedKey+0xee>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	ce 01       	movw	r24, r28
    2366:	05 96       	adiw	r24, 0x05	; 5
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	40 81       	ld	r20, Z
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	ce 01       	movw	r24, r28
    2378:	09 96       	adiw	r24, 0x09	; 9
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	90 81       	ld	r25, Z
    2382:	9e 01       	movw	r18, r28
    2384:	2c 5f       	subi	r18, 0xFC	; 252
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	84 2f       	mov	r24, r20
    238a:	69 2f       	mov	r22, r25
    238c:	a9 01       	movw	r20, r18
    238e:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	88 23       	and	r24, r24
    2396:	19 f3       	breq	.-58     	; 0x235e <keypad_enuGetPressedKey+0xba>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	8f 87       	std	Y+15, r24	; 0x0f
    23a0:	10 c0       	rjmp	.+32     	; 0x23c2 <keypad_enuGetPressedKey+0x11e>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	84 30       	cpi	r24, 0x04	; 4
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <keypad_enuGetPressedKey+0x10c>
    23ae:	a5 cf       	rjmp	.-182    	; 0x22fa <keypad_enuGetPressedKey+0x56>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	8f 5f       	subi	r24, 0xFF	; 255
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	84 30       	cpi	r24, 0x04	; 4
    23ba:	08 f4       	brcc	.+2      	; 0x23be <keypad_enuGetPressedKey+0x11a>
    23bc:	99 cf       	rjmp	.-206    	; 0x22f0 <keypad_enuGetPressedKey+0x4c>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    23c4:	2f 96       	adiw	r28, 0x0f	; 15
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <main>:

uint8_t Tx_Buffer[5] = {0};
uint8_t Rx_buffer = 0;
uint8_t Global_u8IsLoggedIn = 0;

int main() {
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <main+0x6>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    UART_vidInit(9600);
    23e0:	80 e8       	ldi	r24, 0x80	; 128
    23e2:	95 e2       	ldi	r25, 0x25	; 37
    23e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vidInit>
    LCD_enuInit();
    23e8:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_enuInit>

    keypad_enuInit();
    23ec:	0e 94 9a 10 	call	0x2134	; 0x2134 <keypad_enuInit>



	// Telling ECU: Hey, I Am awake
	UART_enuSendChar('S');
    23f0:	83 e5       	ldi	r24, 0x53	; 83
    23f2:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_enuSendChar>
	while (1) {
        UART_enuRecieveChar(&Rx_buffer);
    23f6:	86 ec       	ldi	r24, 0xC6	; 198
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 54 06 	call	0xca8	; 0xca8 <UART_enuRecieveChar>

        switch(Rx_buffer){
    23fe:	80 91 c6 00 	lds	r24, 0x00C6
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	3a 83       	std	Y+2, r19	; 0x02
    2408:	29 83       	std	Y+1, r18	; 0x01
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	87 35       	cpi	r24, 0x57	; 87
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <main+0x40>
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <main+0xbe>
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	3a 81       	ldd	r19, Y+2	; 0x02
    241a:	28 35       	cpi	r18, 0x58	; 88
    241c:	31 05       	cpc	r19, r1
    241e:	64 f4       	brge	.+24     	; 0x2438 <main+0x62>
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	8e 34       	cpi	r24, 0x4E	; 78
    2426:	91 05       	cpc	r25, r1
    2428:	31 f1       	breq	.+76     	; 0x2476 <main+0xa0>
    242a:	29 81       	ldd	r18, Y+1	; 0x01
    242c:	3a 81       	ldd	r19, Y+2	; 0x02
    242e:	22 35       	cpi	r18, 0x52	; 82
    2430:	31 05       	cpc	r19, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <main+0x60>
    2434:	3e c0       	rjmp	.+124    	; 0x24b2 <main+0xdc>
    2436:	4d c0       	rjmp	.+154    	; 0x24d2 <main+0xfc>
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	88 35       	cpi	r24, 0x58	; 88
    243e:	91 05       	cpc	r25, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <main+0x6e>
    2442:	42 c0       	rjmp	.+132    	; 0x24c8 <main+0xf2>
    2444:	29 81       	ldd	r18, Y+1	; 0x01
    2446:	3a 81       	ldd	r19, Y+2	; 0x02
    2448:	29 35       	cpi	r18, 0x59	; 89
    244a:	31 05       	cpc	r19, r1
    244c:	09 f0       	breq	.+2      	; 0x2450 <main+0x7a>
    244e:	41 c0       	rjmp	.+130    	; 0x24d2 <main+0xfc>
        	case 'Y':
        		LCD_enuClearDisplay();
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
        		LCD_u8SetPosXY(0, 0);
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>

        		LCD_u8SendString("Enter Password: ");
    245e:	80 e6       	ldi	r24, 0x60	; 96
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_u8SendString>
        		LCD_u8SetPosXY(0, 2);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>
        		// handle keyInput
        		Handle_keyInput('L');
    246e:	8c e4       	ldi	r24, 0x4C	; 76
    2470:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Handle_keyInput>
    2474:	2e c0       	rjmp	.+92     	; 0x24d2 <main+0xfc>

        	break;
        	case 'N':
        		LCD_u8SendString("Set New Password: ");
    2476:	81 e7       	ldi	r24, 0x71	; 113
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_u8SendString>
        		LCD_u8SetPosXY(0, 2);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>
        		// handle keyInput
        		Handle_keyInput('C');
    2486:	83 e4       	ldi	r24, 0x43	; 67
    2488:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Handle_keyInput>
        		LCD_enuClearDisplay();
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
    2492:	1f c0       	rjmp	.+62     	; 0x24d2 <main+0xfc>

        	break;
        	case 'W':
				LCD_enuClearDisplay();
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
				LCD_u8SendString("Wrong enter Pass: ");
    249a:	84 e8       	ldi	r24, 0x84	; 132
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_u8SendString>
				LCD_u8SetPosXY(0, 2);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	62 e0       	ldi	r22, 0x02	; 2
    24a6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>

				Handle_keyInput('L');
    24aa:	8c e4       	ldi	r24, 0x4C	; 76
    24ac:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Handle_keyInput>
    24b0:	10 c0       	rjmp	.+32     	; 0x24d2 <main+0xfc>

    		break;
        	case 'R':
        		LCD_enuClearDisplay();
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
        		LCD_u8SetPosXY(0, 0);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>
        		Global_u8IsLoggedIn = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 c7 00 	sts	0x00C7, r24
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <main+0xfc>

        	break;
        	case 'X':
        		Global_u8IsLoggedIn = 0;
    24c8:	10 92 c7 00 	sts	0x00C7, r1
        		Rx_buffer = 'Y';
    24cc:	89 e5       	ldi	r24, 0x59	; 89
    24ce:	80 93 c6 00 	sts	0x00C6, r24
        }




        if(Global_u8IsLoggedIn){
    24d2:	80 91 c7 00 	lds	r24, 0x00C7
    24d6:	88 23       	and	r24, r24
    24d8:	09 f4       	brne	.+2      	; 0x24dc <main+0x106>
    24da:	8d cf       	rjmp	.-230    	; 0x23f6 <main+0x20>
        	/*
        	 *
        	 *
        	 * */
        	LCD_enuClearDisplay();
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_enuSendCommand>
			LCD_u8SendString("ON: 1 | OFF: 0 ");
    24e2:	87 e9       	ldi	r24, 0x97	; 151
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_u8SendString>
			LCD_u8SetPosXY(0, 2);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	62 e0       	ldi	r22, 0x02	; 2
    24ee:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_u8SetPosXY>
			Handle_keyInput('R');
    24f2:	82 e5       	ldi	r24, 0x52	; 82
    24f4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Handle_keyInput>
    24f8:	7e cf       	rjmp	.-260    	; 0x23f6 <main+0x20>

000024fa <Handle_keyInput>:

    return 0;
}


void Handle_keyInput(uint8_t Copy_u8dataType) {
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <Handle_keyInput+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <Handle_keyInput+0x8>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <Handle_keyInput+0xa>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t keyStatus = 0;
    250a:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t padPressedValue = 0;
    250c:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t Local_u8TxIndex = 0;
    250e:	19 82       	std	Y+1, r1	; 0x01

    while (1) {
        keyStatus = keypad_enuGetPressedKey(&padPressedValue);
    2510:	ce 01       	movw	r24, r28
    2512:	03 96       	adiw	r24, 0x03	; 3
    2514:	0e 94 52 11 	call	0x22a4	; 0x22a4 <keypad_enuGetPressedKey>
    2518:	8a 83       	std	Y+2, r24	; 0x02

        if (keyStatus == 0 && padPressedValue != 0) {
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	88 23       	and	r24, r24
    251e:	09 f0       	breq	.+2      	; 0x2522 <Handle_keyInput+0x28>
    2520:	6c c0       	rjmp	.+216    	; 0x25fa <Handle_keyInput+0x100>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	88 23       	and	r24, r24
    2526:	09 f4       	brne	.+2      	; 0x252a <Handle_keyInput+0x30>
    2528:	68 c0       	rjmp	.+208    	; 0x25fa <Handle_keyInput+0x100>
            if (padPressedValue != 'K') {
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	8b 34       	cpi	r24, 0x4B	; 75
    252e:	09 f4       	brne	.+2      	; 0x2532 <Handle_keyInput+0x38>
    2530:	47 c0       	rjmp	.+142    	; 0x25c0 <Handle_keyInput+0xc6>
                switch (Copy_u8dataType) {
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	3e 83       	std	Y+6, r19	; 0x06
    253a:	2d 83       	std	Y+5, r18	; 0x05
    253c:	8d 81       	ldd	r24, Y+5	; 0x05
    253e:	9e 81       	ldd	r25, Y+6	; 0x06
    2540:	8c 34       	cpi	r24, 0x4C	; 76
    2542:	91 05       	cpc	r25, r1
    2544:	59 f0       	breq	.+22     	; 0x255c <Handle_keyInput+0x62>
    2546:	2d 81       	ldd	r18, Y+5	; 0x05
    2548:	3e 81       	ldd	r19, Y+6	; 0x06
    254a:	22 35       	cpi	r18, 0x52	; 82
    254c:	31 05       	cpc	r19, r1
    254e:	c9 f0       	breq	.+50     	; 0x2582 <Handle_keyInput+0x88>
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	83 34       	cpi	r24, 0x43	; 67
    2556:	91 05       	cpc	r25, r1
    2558:	09 f0       	breq	.+2      	; 0x255c <Handle_keyInput+0x62>
    255a:	4f c0       	rjmp	.+158    	; 0x25fa <Handle_keyInput+0x100>
                    case 'L':
                    case 'C':
                        if (Local_u8TxIndex < 5) {
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	85 30       	cpi	r24, 0x05	; 5
    2560:	08 f0       	brcs	.+2      	; 0x2564 <Handle_keyInput+0x6a>
    2562:	4b c0       	rjmp	.+150    	; 0x25fa <Handle_keyInput+0x100>
                            LCD_enuSendData(padPressedValue);
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>
                            Tx_Buffer[Local_u8TxIndex++] = padPressedValue;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	2b 81       	ldd	r18, Y+3	; 0x03
    2572:	fc 01       	movw	r30, r24
    2574:	ef 53       	subi	r30, 0x3F	; 63
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	20 83       	st	Z, r18
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	3c c0       	rjmp	.+120    	; 0x25fa <Handle_keyInput+0x100>
                        }
                        break;


                    case 'R':
                        if (Local_u8TxIndex < 1) {
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 23       	and	r24, r24
    2586:	c9 f5       	brne	.+114    	; 0x25fa <Handle_keyInput+0x100>

                        	if(padPressedValue == '7'){
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	87 33       	cpi	r24, 0x37	; 55
    258c:	21 f4       	brne	.+8      	; 0x2596 <Handle_keyInput+0x9c>
                        		UART_enuSendChar('X');
    258e:	88 e5       	ldi	r24, 0x58	; 88
    2590:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_enuSendChar>
    2594:	3a c0       	rjmp	.+116    	; 0x260a <Handle_keyInput+0x110>
                        		return;
                        	}

                        	if(padPressedValue == '1' || padPressedValue == '0'){
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	81 33       	cpi	r24, 0x31	; 49
    259a:	19 f0       	breq	.+6      	; 0x25a2 <Handle_keyInput+0xa8>
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	80 33       	cpi	r24, 0x30	; 48
    25a0:	61 f5       	brne	.+88     	; 0x25fa <Handle_keyInput+0x100>
								LCD_enuSendData(padPressedValue);
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_enuSendData>
								Tx_Buffer[Local_u8TxIndex++] = padPressedValue;
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	2b 81       	ldd	r18, Y+3	; 0x03
    25b0:	fc 01       	movw	r30, r24
    25b2:	ef 53       	subi	r30, 0x3F	; 63
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	20 83       	st	Z, r18
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	1d c0       	rjmp	.+58     	; 0x25fa <Handle_keyInput+0x100>

                        }
                        break;
                }
            } else {
                Tx_Buffer[Local_u8TxIndex] = '\0';
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	fc 01       	movw	r30, r24
    25c8:	ef 53       	subi	r30, 0x3F	; 63
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	10 82       	st	Z, r1
                UART_enuSendChar(Copy_u8dataType);
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_enuSendChar>
                UART_enuSendString(Tx_Buffer);
    25d4:	81 ec       	ldi	r24, 0xC1	; 193
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 26 06 	call	0xc4c	; 0xc4c <UART_enuSendString>
                memset(Tx_Buffer, 0, sizeof(Tx_Buffer));
    25dc:	81 ec       	ldi	r24, 0xC1	; 193
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	45 e0       	ldi	r20, 0x05	; 5
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	0e 94 82 13 	call	0x2704	; 0x2704 <memset>
                Local_u8TxIndex = 0;
    25ec:	19 82       	std	Y+1, r1	; 0x01
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <Handle_keyInput+0x110>
                break;
            }
        }

        while (keyStatus == 0 && padPressedValue != 0) {
            keyStatus = keypad_enuGetPressedKey(&padPressedValue);
    25f0:	ce 01       	movw	r24, r28
    25f2:	03 96       	adiw	r24, 0x03	; 3
    25f4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <keypad_enuGetPressedKey>
    25f8:	8a 83       	std	Y+2, r24	; 0x02
                Local_u8TxIndex = 0;
                break;
            }
        }

        while (keyStatus == 0 && padPressedValue != 0) {
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <Handle_keyInput+0x108>
    2600:	87 cf       	rjmp	.-242    	; 0x2510 <Handle_keyInput+0x16>
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	88 23       	and	r24, r24
    2606:	a1 f7       	brne	.-24     	; 0x25f0 <Handle_keyInput+0xf6>
    2608:	83 cf       	rjmp	.-250    	; 0x2510 <Handle_keyInput+0x16>
            keyStatus = keypad_enuGetPressedKey(&padPressedValue);
        }
    }
}
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <__udivmodsi4>:
    261c:	a1 e2       	ldi	r26, 0x21	; 33
    261e:	1a 2e       	mov	r1, r26
    2620:	aa 1b       	sub	r26, r26
    2622:	bb 1b       	sub	r27, r27
    2624:	fd 01       	movw	r30, r26
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <__udivmodsi4_ep>

00002628 <__udivmodsi4_loop>:
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	ee 1f       	adc	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	a2 17       	cp	r26, r18
    2632:	b3 07       	cpc	r27, r19
    2634:	e4 07       	cpc	r30, r20
    2636:	f5 07       	cpc	r31, r21
    2638:	20 f0       	brcs	.+8      	; 0x2642 <__udivmodsi4_ep>
    263a:	a2 1b       	sub	r26, r18
    263c:	b3 0b       	sbc	r27, r19
    263e:	e4 0b       	sbc	r30, r20
    2640:	f5 0b       	sbc	r31, r21

00002642 <__udivmodsi4_ep>:
    2642:	66 1f       	adc	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	88 1f       	adc	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	1a 94       	dec	r1
    264c:	69 f7       	brne	.-38     	; 0x2628 <__udivmodsi4_loop>
    264e:	60 95       	com	r22
    2650:	70 95       	com	r23
    2652:	80 95       	com	r24
    2654:	90 95       	com	r25
    2656:	9b 01       	movw	r18, r22
    2658:	ac 01       	movw	r20, r24
    265a:	bd 01       	movw	r22, r26
    265c:	cf 01       	movw	r24, r30
    265e:	08 95       	ret

00002660 <__divmodsi4>:
    2660:	97 fb       	bst	r25, 7
    2662:	09 2e       	mov	r0, r25
    2664:	05 26       	eor	r0, r21
    2666:	0e d0       	rcall	.+28     	; 0x2684 <__divmodsi4_neg1>
    2668:	57 fd       	sbrc	r21, 7
    266a:	04 d0       	rcall	.+8      	; 0x2674 <__divmodsi4_neg2>
    266c:	d7 df       	rcall	.-82     	; 0x261c <__udivmodsi4>
    266e:	0a d0       	rcall	.+20     	; 0x2684 <__divmodsi4_neg1>
    2670:	00 1c       	adc	r0, r0
    2672:	38 f4       	brcc	.+14     	; 0x2682 <__divmodsi4_exit>

00002674 <__divmodsi4_neg2>:
    2674:	50 95       	com	r21
    2676:	40 95       	com	r20
    2678:	30 95       	com	r19
    267a:	21 95       	neg	r18
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	4f 4f       	sbci	r20, 0xFF	; 255
    2680:	5f 4f       	sbci	r21, 0xFF	; 255

00002682 <__divmodsi4_exit>:
    2682:	08 95       	ret

00002684 <__divmodsi4_neg1>:
    2684:	f6 f7       	brtc	.-4      	; 0x2682 <__divmodsi4_exit>
    2686:	90 95       	com	r25
    2688:	80 95       	com	r24
    268a:	70 95       	com	r23
    268c:	61 95       	neg	r22
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	08 95       	ret

00002696 <__prologue_saves__>:
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	ca 1b       	sub	r28, r26
    26c0:	db 0b       	sbc	r29, r27
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	09 94       	ijmp

000026ce <__epilogue_restores__>:
    26ce:	2a 88       	ldd	r2, Y+18	; 0x12
    26d0:	39 88       	ldd	r3, Y+17	; 0x11
    26d2:	48 88       	ldd	r4, Y+16	; 0x10
    26d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26da:	8c 84       	ldd	r8, Y+12	; 0x0c
    26dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26de:	aa 84       	ldd	r10, Y+10	; 0x0a
    26e0:	b9 84       	ldd	r11, Y+9	; 0x09
    26e2:	c8 84       	ldd	r12, Y+8	; 0x08
    26e4:	df 80       	ldd	r13, Y+7	; 0x07
    26e6:	ee 80       	ldd	r14, Y+6	; 0x06
    26e8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ea:	0c 81       	ldd	r16, Y+4	; 0x04
    26ec:	1b 81       	ldd	r17, Y+3	; 0x03
    26ee:	aa 81       	ldd	r26, Y+2	; 0x02
    26f0:	b9 81       	ldd	r27, Y+1	; 0x01
    26f2:	ce 0f       	add	r28, r30
    26f4:	d1 1d       	adc	r29, r1
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	ed 01       	movw	r28, r26
    2702:	08 95       	ret

00002704 <memset>:
    2704:	dc 01       	movw	r26, r24
    2706:	01 c0       	rjmp	.+2      	; 0x270a <memset+0x6>
    2708:	6d 93       	st	X+, r22
    270a:	41 50       	subi	r20, 0x01	; 1
    270c:	50 40       	sbci	r21, 0x00	; 0
    270e:	e0 f7       	brcc	.-8      	; 0x2708 <memset+0x4>
    2710:	08 95       	ret

00002712 <_exit>:
    2712:	f8 94       	cli

00002714 <__stop_program>:
    2714:	ff cf       	rjmp	.-2      	; 0x2714 <__stop_program>
